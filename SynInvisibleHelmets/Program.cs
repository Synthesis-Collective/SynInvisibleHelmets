using System;
using System.Threading.Tasks;

using Mutagen.Bethesda;
using Mutagen.Bethesda.FormKeys.SkyrimSE;
using Mutagen.Bethesda.Synthesis;
using Mutagen.Bethesda.Skyrim;

using Noggog;

using SynInvisibleHelmets.Types;

namespace SynInvisibleHelmets
{
    public class Program
    {
        static Lazy<Setting> LazySettings = new();
        static Setting Config => LazySettings.Value;
        public static async Task<int> Main(string[] args)
        {
            return await SynthesisPipeline.Instance
                .SetAutogeneratedSettings("Settings", "settings.json", out LazySettings)
                .AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
                .SetTypicalOpen(GameRelease.SkyrimSE, "SynInvisHelmets.esp")
                .Run(args);
        }

        public static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            foreach (var armor in state.LoadOrder.PriorityOrder.Armor().WinningOverrides())
            {
                if (
                    !string.IsNullOrEmpty(armor.Name?.String ?? "") &&
                    armor.BodyTemplate != null &&
                    (!Config.IgnoreMods.Contains(armor.FormKey.ModKey) && !Config.IgnoreItems.Contains(armor.FormKey)) &&
                    (armor.HasKeyword(Skyrim.Keyword.ArmorHelmet) || armor.HasKeyword(Skyrim.Keyword.ClothingHead) ||
                    (armor.HasKeyword(Skyrim.Keyword.ArmorClothing) && armor.HasKeyword(Skyrim.Keyword.ClothingBody) && armor.BodyTemplate.FirstPersonFlags.HasFlag(BipedObjectFlag.Hair))) &&
                    !armor.HasKeyword(Skyrim.Keyword.ArmorJewelry)
                )
                {
                    var na = state.PatchMod.Armors.GetOrAddAsOverride(armor);
                    Console.WriteLine($"Patching {na.Name?.String}");
                    if (na.BodyTemplate != null)
                    {
                        na.BodyTemplate.FirstPersonFlags &= ~BipedObjectFlag.Head;
                        na.BodyTemplate.FirstPersonFlags &= ~BipedObjectFlag.Hair;
                        na.BodyTemplate.FirstPersonFlags &= ~BipedObjectFlag.LongHair;
                        na.BodyTemplate.FirstPersonFlags &= ~BipedObjectFlag.Ears;
                        na.BodyTemplate.FirstPersonFlags |= (BipedObjectFlag)(1 << Config.slotToUse);
                    }
                }
            }
        }
    }
}
